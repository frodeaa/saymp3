#!/usr/bin/env bash

# This script use the OSX say command to convert input text to mp3
# The script requires lame and mp3val to be installed
#
#  $ brew install lame mp3val
#
# Example:
#
#  $ cat book.txt | saymp3 -s alex -r 175 -o book.mp3
#  $ saymp3 -s alex -r 175 -o book.mp3 book.txt
#

me="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
version="${me} version 0.3.1"

voice="alex"
rate="175"
quality="-q 0 -v -V 9 -mm -B 32"
filename="out.mp3"
lame_id3_opts=""
text_input=
debug=
tmp_dir=

debug() {
	if [ -n "$debug" ]; then
		printf "%s\n" "$*" >&2
	fi
}

init_tmp_dir_output() {
    tmp_dir=`mktemp -d 2>/dev/null || mktemp -d -t "${me}"`
    trap 'rm -rf "${tmp_dir}"' EXIT
    > "${filename}"
}

tts_mp3() {
	local input="$1"
	local output="$2"
	say --voice="${voice}" --rate="${rate}" --output-file="${output}.aiff" "${input}"
	lame --quiet ${quality} "${output}.aiff" "${output}" && rm "${output}.aiff"
}

tts_by_line() {
    set +e
    local k=0
    local i=0
    local lines="$1"
    while read line;
    do
        [ -z "$line" ] && continue
        (tts_mp3 ". ${line}" "${tmp_dir}/l_${k}_.mp3" >&2 & wait %1; echo $?) &
        if (( $k % 10 == 0 )); then wait; fi # LIMIT TO 10 sub processes
        k=$((k + 1))
    done < ${lines} | grep -qv 0 && exit 1
    set -e
}

merge_mp3_files() {
	local output="$1"
	find "${tmp_dir}" -name "*.mp3" |\
		sort --numeric-sort --field-separator=_ --key=3 |\
		xargs cat >> "${output}"
	mp3val "${output}" -f -nb > /dev/null 2>&1
}

usage() {
	cat <<EOF
usage: ${me} [-s voice] [-r rate] [-q quality] [-o output] [file...]

create mp3 audio files from text input

options:
  -s, -s ${voice}        specify the voice to be used.
  -r, -r ${rate}         speech rate to be used, in words per minute.
  -q, -q "${quality}"
                     quality settings, see lame options (lame --longhelp)
  -o, -o ${filename}     output filename
  -t <title>         title
  -i <file>          albumArt
  -v                 show version
  -h                 show help
  -d                 show debug messages
EOF
	exit 1
}

requires_command() {
	command -v "${1}" >/dev/null 2>&1 || \
		{ echo >&2 "require '${1}' but it's not installed."; exit 1; }
}

set -e

requires_command say
requires_command lame
requires_command mp3val

while getopts "dhvs:r:q:o:t:i:" opt; do
	case ${opt} in
		h)
			usage
			;;
		d)
			debug=1
			;;
		v)
			echo "${version}" && exit 0
			;;
		s)
			voice=${OPTARG}
			;;
		r)
			rate=${OPTARG}
			;;
		q)
			quality=${OPTARG}
			;;
		o)
			filename=${OPTARG}
			;;
		t)
			lame_id3_opts="${lame_id3_opts} --t${opt} \"${OPTARG}\""
			;;
		i)
			if [ -f "${OPTARG}" ]; then
				lame_id3_opts="${lame_id3_opts} --t${opt} \"${OPTARG}\""
			else
				echo "${OPTARG} is not a file" >&2 && exit 1
			fi
			;;
		:)
			echo "option -$OPTARG requires an argument." >&2 && exit 1
		;;
	esac
done

init_tmp_dir_output

debug "voice: {$voice}"
debug "rate: {$rate}"
debug "quality: {$quality}"
debug "filename: {$filename}"
debug "lame_id3_opts: {$lame_id3_opts}"
debug "tmp_dir: {$tmp_dir}"

shift $(( OPTIND-1 ))
text_input="${1:-/dev/stdin}"

tts_by_line "${text_input}"
merge_mp3_files "${filename}"

if [ ! -z "$lame_id3_opts" ]; then
	tmp_wmeta="${tmp_dir}/wmeta_${filename}"
	lame_id3_opts="${lame_id3_opts} --silent --add-id3v2"
	eval "lame${lame_id3_opts} "${filename}" "${tmp_wmeta}";"
	mv "${tmp_wmeta}" "${filename}"
fi
